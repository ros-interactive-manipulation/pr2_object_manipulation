/*
 * Copyright (c) 2009, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Willow Garage, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "ui_advanced_options_dialog.h" // generated by uic.

#include "pr2_interactive_manipulation/advanced_options_dialog.h"
#include "pr2_interactive_manipulation/interactive_manipulation_frontend.h"

namespace pr2_interactive_manipulation {

AdvancedOptionsDialog::AdvancedOptionsDialog(InteractiveManipulationFrontend *frontend) :
  QDialog( frontend ),
  frontend_(frontend),
  ui_( new Ui::AdvancedOptionsDialog ),
  root_nh_("")
{
  ui_->setupUi( this );
  connect( ui_->reactive_grasping_box_, SIGNAL( clicked() ), this, SLOT( reactiveGraspingClicked() ));
  connect( ui_->reactive_transport_box_, SIGNAL( clicked() ), this, SLOT( reactiveForceClicked() ));
  connect( ui_->set_defaults_button_, SIGNAL( clicked() ), this, SLOT( setDefaultsClicked() ));
  connect( ui_->accept_button_, SIGNAL( clicked() ), this, SLOT( acceptClicked() ));
  connect( ui_->cancel_button_, SIGNAL( clicked() ), this, SLOT( reject() ));
  connect( ui_->find_alternatives_box_, SIGNAL( clicked() ), this, SLOT( findAlternativesClicked() ));
  connect( ui_->always_plan_grasps_box_, SIGNAL( clicked() ), this, SLOT( alwaysPlanGraspsClicked() ));
  connect( ui_->cycle_gripper_opening_box_, SIGNAL( clicked() ), this, SLOT( cycleGripperOpeningClicked() ));
}

AdvancedOptionsDialog::~AdvancedOptionsDialog()
{
  delete ui_;
}

void AdvancedOptionsDialog::setDefaultsClicked()
{
  setOptions( getDefaults() );
}

AdvancedGraspOptions AdvancedOptionsDialog::getDefaults(int interface_number, int task_number)
{
  AdvancedGraspOptions go;
  go.reactive_grasping_ = false;
  go.reactive_force_ = false;
  go.reactive_place_ = false;
  go.find_alternatives_ = true;
  go.always_plan_grasps_ = false;
  go.cycle_gripper_opening_ = false;
  go.lift_steps_  = 10;
  go.retreat_steps_ = 10;
  go.lift_direction_choice_ = 0;
  go.desired_approach_ = 10;
  go.min_approach_ = 5;
  go.max_contact_force_ = 50;
  switch (task_number)
  {
  case 3:
    go.lift_direction_choice_ = 1;
    break;
  }

  return go;
}

AdvancedGraspOptions AdvancedOptionsDialog::getOptions()
{
  AdvancedGraspOptions go;
  go.reactive_grasping_ = ui_->reactive_grasping_box_->isChecked();
  go.reactive_force_ = ui_->reactive_transport_box_->isChecked();
  go.reactive_place_ = ui_->reactive_place_box_->isChecked();
  go.find_alternatives_ = ui_->find_alternatives_box_->isChecked();
  go.always_plan_grasps_ = ui_->always_plan_grasps_box_->isChecked();
  go.cycle_gripper_opening_ = ui_->cycle_gripper_opening_box_->isChecked();
  go.lift_steps_  = ui_->lift_distance_spin_->value();
  go.retreat_steps_ = ui_->retreat_distance_spin_->value();
  go.lift_direction_choice_ = ui_->lift_direction_choice_->currentIndex();
  go.desired_approach_ = ui_->desired_grasp_approach_spin_->value();
  go.min_approach_ = ui_->min_grasp_approach_spin_->value();
  go.max_contact_force_ = ui_->max_contact_force_spin_->value();
  return go;
}

void AdvancedOptionsDialog::setOptions(AdvancedGraspOptions go)
{
  ui_->reactive_grasping_box_->setChecked(go.reactive_grasping_);
  ui_->reactive_transport_box_->setChecked(go.reactive_force_);
  ui_->reactive_place_box_->setChecked(go.reactive_place_);
  ui_->find_alternatives_box_->setChecked(go.find_alternatives_);
  ui_->always_plan_grasps_box_->setChecked(go.always_plan_grasps_);
  ui_->cycle_gripper_opening_box_->setChecked(go.cycle_gripper_opening_);
  ui_->lift_distance_spin_->setValue(go.lift_steps_);
  ui_->retreat_distance_spin_->setValue(go.retreat_steps_);
  ui_->lift_direction_choice_->setCurrentIndex(go.lift_direction_choice_);
  ui_->desired_grasp_approach_spin_->setValue(go.desired_approach_);
  ui_->min_grasp_approach_spin_->setValue(go.min_approach_);
  ui_->max_contact_force_spin_->setValue(go.max_contact_force_);
}

void AdvancedOptionsDialog::acceptClicked()
{
  frontend_->setAdvancedOptions(getOptionsMsg());
  accept();
}


pr2_object_manipulation_msgs::IMGUIAdvancedOptions AdvancedOptionsDialog::getDefaultsMsg(int interface_number, int task_number)
{
  pr2_object_manipulation_msgs::IMGUIAdvancedOptions go;
  go.reactive_grasping = false;
  go.reactive_force = false;
  go.reactive_place = false;
  go.find_alternatives = true;
  go.always_plan_grasps = false;
  go.cycle_gripper_opening = false;
  go.lift_steps  = 10;
  go.retreat_steps = 10;
  go.lift_direction_choice = 0;
  go.desired_approach = 10;
  go.min_approach = 5;
  go.max_contact_force = 50;
  switch (task_number)
  {
  case 3:
    go.lift_direction_choice = 1;
    break;
  }
  return go;
}

pr2_object_manipulation_msgs::IMGUIAdvancedOptions AdvancedOptionsDialog::getOptionsMsg()
{
  pr2_object_manipulation_msgs::IMGUIAdvancedOptions go;
  go.reactive_grasping = ui_->reactive_grasping_box_->isChecked();
  go.reactive_force = ui_->reactive_transport_box_->isChecked();
  go.reactive_place = ui_->reactive_place_box_->isChecked();
  go.find_alternatives = ui_->find_alternatives_box_->isChecked();
  go.always_plan_grasps = ui_->always_plan_grasps_box_->isChecked();
  go.cycle_gripper_opening = ui_->cycle_gripper_opening_box_->isChecked();

  go.lift_steps  = ui_->lift_distance_spin_->value();
  go.retreat_steps = ui_->retreat_distance_spin_->value();
  go.lift_direction_choice = ui_->lift_direction_choice_->currentIndex();
  go.desired_approach = ui_->desired_grasp_approach_spin_->value();
  go.min_approach = ui_->min_grasp_approach_spin_->value();
  go.max_contact_force = ui_->max_contact_force_spin_->value();
  return go;
}

void AdvancedOptionsDialog::setOptionsMsg(pr2_object_manipulation_msgs::IMGUIAdvancedOptions go)
{
  ui_->reactive_grasping_box_->setChecked(go.reactive_grasping);
  ui_->reactive_transport_box_->setChecked(go.reactive_force);
  ui_->reactive_place_box_->setChecked(go.reactive_place);
  ui_->find_alternatives_box_->setChecked(go.find_alternatives);
  ui_->always_plan_grasps_box_->setChecked(go.always_plan_grasps);
  ui_->cycle_gripper_opening_box_->setChecked(go.cycle_gripper_opening);
  ui_->lift_distance_spin_->setValue(go.lift_steps);
  ui_->retreat_distance_spin_->setValue(go.retreat_steps);
  ui_->lift_direction_choice_->setCurrentIndex(go.lift_direction_choice);
  ui_->desired_grasp_approach_spin_->setValue(go.desired_approach);
  ui_->min_grasp_approach_spin_->setValue(go.min_approach);
  ui_->max_contact_force_spin_->setValue(go.max_contact_force);
}

void AdvancedOptionsDialog::reactiveGraspingClicked()
{
  //reactive gripper force is only allowed together with reactive grasping
  if (!ui_->reactive_grasping_box_->isChecked()) ui_->reactive_transport_box_->setChecked(false);
}

void AdvancedOptionsDialog::reactiveForceClicked()
{
  //reactive gripper force is only allowed together with reactive grasping
  if (!ui_->reactive_grasping_box_->isChecked()) ui_->reactive_grasping_box_->setChecked(true);  
}

void AdvancedOptionsDialog::findAlternativesClicked()
{
  if (ui_->find_alternatives_box_->isChecked())
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/always_find_alternatives", true);
  }
  else
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/always_find_alternatives", false);
  }
}

void AdvancedOptionsDialog::alwaysPlanGraspsClicked()
{
  if (ui_->always_plan_grasps_box_->isChecked())
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/always_call_planner", true);
  }
  else
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/always_call_planner", false);
  }
}

void AdvancedOptionsDialog::cycleGripperOpeningClicked()
{
  if (ui_->cycle_gripper_opening_box_->isChecked())
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/gripper_opening_cycling", true);
  }
  else
  {
    root_nh_.setParam("pr2_interactive_gripper_pose_action/gripper_opening_cycling", false);
  }
}


}
